diff --git a/lib/markdown-to-jsonapi.js b/lib/markdown-to-jsonapi.js
index b06574e1893b94bf570af1c1151b137dcb73597b..3269419ce391deb33631313fbcadb08fae9be750 100644
--- a/lib/markdown-to-jsonapi.js
+++ b/lib/markdown-to-jsonapi.js
@@ -1,39 +1,56 @@
-const PersistentFilter = require('broccoli-persistent-filter');
-const yamlFront = require('yaml-front-matter');
-const showdown = require('showdown');
-const _ = require('lodash');
-const h2p = require('html2plaintext');
-const { Serializer } = require('jsonapi-serializer');
-const { JSDOM } = require('jsdom');
-const subparsers = require('./showdown-subparsers');
+const PersistentFilter = require("broccoli-persistent-filter");
+const yamlFront = require("yaml-front-matter");
+const showdown = require("showdown");
+const _ = require("lodash");
+const h2p = require("html2plaintext");
+const { Serializer } = require("jsonapi-serializer");
+const { JSDOM } = require("jsdom");
+const subparsers = require("./showdown-subparsers");
+
+showdown.setFlavor("github");
 
 subparsers(showdown);
 
-const supportedContentTypes = ['content', 'html', 'description', 'toc'];
+const footnotes = require("showdown-footnotes");
+
+const supportedContentTypes = ["content", "html", "description", "toc"];
 
 class MarkDownToJsonApi extends PersistentFilter {
   constructor(folder, options) {
     super(folder, options);
-    this.extensions = ['md', 'markdown'];
-    this.targetExtension = 'json';
+    this.extensions = ["md", "markdown"];
+    this.targetExtension = "json";
     this.options = {
-      contentTypes: ['html', 'content'],
-      type: 'content',
+      contentTypes: ["html", "content"],
+      type: "content",
       attributes: [],
       references: [],
       ...options,
     };
 
-    const unsupportedContentTypes = _.difference(this.options.contentTypes, supportedContentTypes);
+    const unsupportedContentTypes = _.difference(
+      this.options.contentTypes,
+      supportedContentTypes,
+    );
 
     if (unsupportedContentTypes.length) {
       throw new Error(`Unknown content type: ${unsupportedContentTypes[0]}`);
     }
 
-    this.converter = new showdown.Converter(this.options.showdownConfig);
+    this.converter = new showdown.Converter({
+      ...this.options.showdownConfig,
+      tables: true,
+      strikethrough: true,
+      extensions: [
+        ...(this.options.showdownConfig?.extensions || []),
+        footnotes,
+      ],
+    });
+
+    this.converter.setFlavor("github");
 
     const referenceAttributes = this.options.references.map((ref) => {
-      if (typeof ref === 'object') return ref.name;
+      if (typeof ref === "object") return ref.name;
 
       return ref;
     });
@@ -45,7 +62,7 @@ class MarkDownToJsonApi extends PersistentFilter {
         this.options.attributes,
         referenceAttributes,
       ),
-      keyForAttribute: 'camelCase',
+      keyForAttribute: "camelCase",
     };
 
     referenceAttributes.forEach((reference) => {
@@ -53,7 +70,9 @@ class MarkDownToJsonApi extends PersistentFilter {
     });
 
     serializerOptions.typeForAttribute = (attribute) => {
-      const customTypeRef = this.options.references.find((ref) => ref.name === attribute);
+      const customTypeRef = this.options.references.find(
+        (ref) => ref.name === attribute,
+      );
       if (customTypeRef) {
         return customTypeRef.type;
       }
@@ -70,17 +89,18 @@ class MarkDownToJsonApi extends PersistentFilter {
     const html = this.converter.makeHtml(markdown);
 
     const dom = new JSDOM(html);
-    const headingNodes = dom.window.document.querySelectorAll('h1, h2, h3, h4, h5');
+    const headingNodes =
+      dom.window.document.querySelectorAll("h1, h2, h3, h4, h5");
 
     const toc = [...headingNodes].map((heading) => ({
       text: heading.textContent,
-      depth: heading.nodeName.replace(/\D/g, ''),
-      id: heading.getAttribute('id'),
+      depth: heading.nodeName.replace(/\D/g, ""),
+      id: heading.getAttribute("id"),
     }));
 
     const baseProperties = {
       path: relativePath,
-      id: relativePath.replace(/\.(md|markdown)$/, ''),
+      id: relativePath.replace(/\.(md|markdown)$/, ""),
       content: markdown,
       html,
       toc,
@@ -88,7 +108,10 @@ class MarkDownToJsonApi extends PersistentFilter {
 
     const resultHash = { ...baseProperties, ...front };
 
-    if (!resultHash.description && _.includes(this.options.contentTypes, 'description')) {
+    if (
+      !resultHash.description &&
+      _.includes(this.options.contentTypes, "description")
+    ) {
       const description = _.truncate(h2p(resultHash.html), {
         length: 260,
         separator: /,?\.* +/,
@@ -102,8 +125,8 @@ class MarkDownToJsonApi extends PersistentFilter {
 
   // eslint-disable-next-line class-methods-use-this
   getDestFilePath(relativePath) {
-    if (relativePath.endsWith('.md') || relativePath.endsWith('.markdown')) {
-      return `${relativePath.replace(/.(md|markdown)$/, '')}.json`;
+    if (relativePath.endsWith(".md") || relativePath.endsWith(".markdown")) {
+      return `${relativePath.replace(/.(md|markdown)$/, "")}.json`;
     }
     return null;
   }
